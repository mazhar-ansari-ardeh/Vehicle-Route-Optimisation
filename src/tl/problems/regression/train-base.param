
# ==============================
# The problem
# ==============================

### Delete these params. They should be set from command-line for each experiment
# gp.tc.0.init = ec.gp.koza.HalfBuilder
eval.problem = tl.problems.regression.one_d.Poly2
gp.tc.0.init = tl.gp.SimpleCodeFragmentBuilder
gp.tc.0.init.transfer-percent = 50
gp.tc.0.init.knowledge-extraction=rootsubtree
gp.tc.0.init.knowledge-file=/am/vuwstocoisnrin1.vuw.ac.nz/grid-solar/sgeusers/mazhar/./stats/Poly0-writeknow/population.gen.49.bin
### Delete these ...

eval.problem.data = tl.problems.regression.VectorData

eval.problem.range_min = -2
eval.problem.range_max = +2
eval.problem.number-of-tests = 100

# gp.tree.print-style=dot
# ==============================
# Basic evolution parameters
# ==============================
state = ec.simple.SimpleEvolutionState
finish = ec.simple.SimpleFinisher
exch = ec.simple.SimpleExchanger
breed = ec.simple.SimpleBreeder
eval = ec.simple.SimpleEvaluator
#stat.num-children = 1
#stat.child.0 = ec.gp.koza.KozaShortStatistics
#stat.child.0.file = $outtabular.stat

generations = 100
quit-on-run-complete = true

pop = ec.Population
pop.subpops = 1
pop.subpop.0 = ec.Subpopulation
pop.subpop.0.size = 1024

breed.elite.0 = 10


stat.file=$./stats/job.0.out.stat
stat.gen-pop-file=./stats/population.gen
seed.0 = time
erc.min = -2
erc.max = +2


# ==============================
# The GPHH evolution state parameters
# ==============================
terminals-from = extended
include-erc = true
rotate-eval-model = true

#print-unaccessed-params = true
#print-used-params = true

# ==============================
# Administrative parameters
# ==============================
evalthreads = 1
breedthreads = 1
# seed.0 = time
checkpoint = false
checkpoint-modulo = 1
checkpoint-prefix = ec

# ==============================
# GP general parameters
# ==============================

# GP population parameters
pop.subpop.0.species = ec.gp.GPSpecies
pop.subpop.0.species.ind = ec.gp.GPIndividual
pop.subpop.0.species.ind.numtrees = 1
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = tc0

# pop.subpop.0.species.fitness = ec.gp.koza.KozaFitness
pop.subpop.0.species.fitness = ec.multiobjective.MultiObjectiveFitness
pop.subpop.0.species.fitness.num-objectives = 1
pop.subpop.0.species.fitness.maximize = false
pop.subpop.0.duplicate-retries = 100

# GP initializer
init = ec.gp.GPInitializer

# GP breeding pipeline
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false
pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.80
pop.subpop.0.species.pipe.source.1 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.15
pop.subpop.0.species.pipe.source.2 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.05

# Selection for reproduction
breed.reproduce.source.0 = ec.select.TournamentSelection

# Koza crossover parameters
gp.koza.xover.source.0 = ec.select.TournamentSelection
gp.koza.xover.source.1 = same
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same
gp.koza.xover.maxdepth = 8
gp.koza.xover.tries = 1

# Koza mutation parameters
gp.koza.mutate.source.0 = ec.select.TournamentSelection
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth = 8
gp.koza.mutate.tries = 1

# Tournament selection, for reproduction, crossover and mutation
select.tournament.size = 7

# Koza grow parameters, for mutation
gp.koza.grow.min-depth = 4
gp.koza.grow.max-depth = 4

# Koza node selector, for crossover and mutation
gp.koza.ns.terminals = 0.1
gp.koza.ns.nonterminals = 0.9
gp.koza.ns.root = 0.0

# GP atomic (a) and set (s) type parameters
gp.type.a.size = 1
gp.type.a.0.name = nil
gp.type.s.size = 0

# GP tree constraints
gp.tc.size = 1
gp.tc.0 = ec.gp.GPTreeConstraints
gp.tc.0.name = tc0
gp.tc.0.fset = f0
gp.tc.0.returns = nil


# Koza half-ramp-and-ramp parameters, for gp.tc.0.init
gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 6
gp.koza.half.growp = 0.5

# GP node constraints (nc[k] means the node takes k children), no other constraint
gp.nc.size = 7

gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc0
gp.nc.0.returns = nil
gp.nc.0.size = 0

gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = nc1
gp.nc.1.returns = nil
gp.nc.1.size = 1
gp.nc.1.child.0 = nil

gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = nc2
gp.nc.2.returns = nil
gp.nc.2.size = 2
gp.nc.2.child.0 = nil
gp.nc.2.child.1 = nil

gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = nc3
gp.nc.3.returns = nil
gp.nc.3.size = 3
gp.nc.3.child.0 = nil
gp.nc.3.child.1 = nil
gp.nc.3.child.2 = nil

gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = nc4
gp.nc.4.returns = nil
gp.nc.4.size = 4
gp.nc.4.child.0 = nil
gp.nc.4.child.1 = nil
gp.nc.4.child.2 = nil
gp.nc.4.child.3 = nil

gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = nc5
gp.nc.5.returns = nil
gp.nc.5.size = 5
gp.nc.5.child.0 = nil
gp.nc.5.child.1 = nil
gp.nc.5.child.2 = nil
gp.nc.5.child.3 = nil
gp.nc.5.child.4 = nil

gp.nc.6 = ec.gp.GPNodeConstraints
gp.nc.6.name = nc6
gp.nc.6.returns = nil
gp.nc.6.size = 6
gp.nc.6.child.0 = nil
gp.nc.6.child.1 = nil
gp.nc.6.child.2 = nil
gp.nc.6.child.3 = nil
gp.nc.6.child.4 = nil
gp.nc.6.child.5 = nil

# GP ADF parameters
gp.problem.stack = ec.gp.ADFStack
gp.adf-stack.context = ec.gp.ADFContext

# ==============================
# GP problem specific parameters
# ==============================

# GP function set parameters
gp.fs.size = 1

gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name = f0

# We have four functions in the function set. They are:

gp.fs.0.size = 8
gp.fs.0.func.0 = tl.problems.regression.Add
gp.fs.0.func.0.nc = nc2
gp.fs.0.func.1 = tl.problems.regression.Sub
gp.fs.0.func.1.nc = nc2
gp.fs.0.func.2 = tl.problems.regression.Mul
gp.fs.0.func.2.nc = nc2
gp.fs.0.func.3 = tl.problems.regression.Div
gp.fs.0.func.3.nc = nc2
gp.fs.0.func.4 = tl.problems.regression.RegERC
gp.fs.0.func.4.nc = nc0
gp.fs.0.func.5 = tl.problems.regression.X
gp.fs.0.func.5.nc = nc0
gp.fs.0.func.6 = tl.problems.regression.Sin
gp.fs.0.func.6.nc = nc1
gp.fs.0.func.7 = tl.problems.regression.Cos
gp.fs.0.func.7.nc = nc1


stat.save-pop = true
stat.save-tree = false
stat = tl.gp.FCFStatistics
