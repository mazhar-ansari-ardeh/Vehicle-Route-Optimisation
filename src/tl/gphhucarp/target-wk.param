parent.0=carp_param_base.param
print-params = false

stat.file=$./stats/target-wk/job.0.out.stat
stat.gen-pop-file=./stats/target-wk/population.gen
eval.problem.eval-model.instances.0.file=gdb/gdb1.dat
eval.problem.eval-model.instances.0.vehicles=6
seed.0=2
# gp.tc.0.init=tl.gp.IqKnowledgeBuilder
# gp.tc.0.init = ec.gp.koza.HalfBuilder
# gp.tc.0.init.knowledge-log-file=./stats/target-wk/IqKnowledgeBuilder
# gp.tc.0.init.knowledge-folder=/home/mazhar/MyPhD/SourceCodes/gpucarp/stats/origin/
# gp.tc.0.init.knowledge-file=/home/mazhar/MyPhD/SourceCodes/gpucarp/stats/origin/population.gen.49.bin
# gp.tc.0.init.knowledge-probability=0.5
# gp.tc.0.init.transfer-percent=75
# gp.tc.0.init.k=2
# gp.tc.0.init.knowledge-extraction=rootsubtree
# pop.subpop.0.species.pipe.origin.1 = tl.gp.TLGPCriptorMutation
# pop.subpop.0.species.pipe.origin.1.knowledge-log-file=./stats/target-wk/TLGPCriptorMutationLog
# pop.subpop.0.species.pipe.origin.1.knowledge-probability=0.5

# ==============================
# Terminal Weight Transfer
# ==============================
# gp.fs.0.func.0 = tl.gphhucarp.TerminalERCWeighted
# gp.fs.0.func.0.terminal-file = book.bk
# gp.fs.0.func.0.weight-use-degeneration-rate=0.8
# gp.fs.0.func.0.weight-use-probability=0.8
# gp.fs.0.func.0.weight-use-policy=all
# gp.fs.0.func.0.knowledge-log-file=./stats/target-wk/TerminalERCWeightedLog
# ==============================

# ==============================
# Terminal Weight Transfer
# ==============================
# gp.fs.0.func.0 = tl.gphhucarp.TerminalERCContribWeighted
# gp.fs.0.func.0.terminal-file = book.bk
# gp.fs.0.func.0.weight-use-degeneration-rate=0.8
# gp.fs.0.func.0.weight-use-probability=0.8
# gp.fs.0.func.0.weight-use-policy=first
# gp.fs.0.func.0.knowledge-log-file=./stats/target-wk/TerminalERCContribWeightedLog
# ==============================


# ==============================
# TerminalERCContribOnlyWeighted Transfer
# ==============================
# gp.fs.0.func.0 = tl.gphhucarp.TerminalERCContribOnlyWeighted
# gp.fs.0.func.0.terminal-file = /home/mazhar/grid/gdb1-v5-to4/1/gdb1-v5.bk
# gp.fs.0.func.0.weight-use-degeneration-rate=0.8
# gp.fs.0.func.0.weight-use-probability=0.8
# gp.fs.0.func.0.weight-use-policy=all
# gp.fs.0.func.0.knowledge-log-file=./stats/target-wk/TerminalERCContribWeightedLog
# gp.fs.0.func.0.min-weight=0.2
# gp.fs.0.func.0.max-weight=0.8
# gp.fs.0.func.0.normalize-weights=false
# ==============================


# ==============================
# ContribSubTree Builder
# ==============================
# gp.tc.0.init=tl.gp.ContribSubtreeBuilder
# gp.tc.0.init.knowledge-file=/run/media/mazhar/Elements/grid/Archive/val10D-v10-to9/1/val10D-v10-all.bk
# percentage of initial population that is created from extracted knowledge
# gp.tc.0.init.transfer-percent=0.50
# gp.tc.0.init.knowledge-log-file=./stats/target-wk/ContribTerminalLog

# ==============================
# PPT Builder
# ==============================
gp.tc.0.init=tl.gp.PPTBuilder
gp.tc.0.init.knowledge-file=/home/mazhar/grid/gdb1.vs5.gdb1.vt6:gen_50/PPTBreeding:ppt_0.4:cmpppt_0:xover_0.4:mut_0.15:repro_0.05:lr_0.8:ss_100:ts:_7:initperc_0.1:igen_49_49:inrad_-1:incap_1:mnThr_0:clear_true/1/PPTBreeding:ppt_0.4:cmpppt_0:xover_0.4:mut_0.15:repro_0.05:lr_0.8:ss_100:ts:_7:initperc_0.1:igen_49_49:inrad_-1:incap_1:mnThr_0:clear_true.ppt
percentage of initial population that is created from extracted knowledge
gp.tc.0.init.transfer-percent=0.50
gp.tc.0.init.knowledge-log-file=./stats/target-wk/PPTBuildLog

# gp.tc.0.init.knowledge-extraction=rootsubtree
# gp.tc.0.init.extract-percent=0.50
# gp.tc.0.init.min-cf-depth=2
# gp.tc.0.init.max-cf-depth=5
# ==============================

# ==============================
# MutatingSubtreeBuilder
# ==============================
# gp.tc.0.init=tl.gp.MutatingSubtreeBuilder
# gp.tc.0.init.knowledge-file=/home/mazhar/grid/gdb1.vs5:gen_50/KnowledgeSource/1/population.gen.49.bin
# gp.tc.0.init.knowledge-log-file=./stats/target-wk/MutatingFullTreeLog
# gp.tc.0.init.transfer-percent=50
# gp.tc.0.init.knowledge-extraction=root
# gp.tc.0.init.ns.0 = ec.gp.koza.KozaNodeSelector
# gp.tc.0.init.num-mutated=2
# gp.tc.0.init.simplify=true
# gp.tc.0.init.target-percent=0.5
# gp.tc.0.init.niche-capacity=2
# gp.tc.0.init.niche-radius=0.1

# ==============================
# Frequent CodeFragment Builder
# ==============================
# gp.tc.0.init=tl.gp.FrequentCodeFragmentBuilder
# gp.tc.0.init.knowledge-directory=/home/mazhar/grid/gdb1.vs5:gen_50/KnowledgeSource/1/
# gp.tc.0.init.knowledge-log-file=./stats/target-wk/FullTreeLog
# gp.tc.0.init.knowledge-extraction=rootsubtree
# percentage of initial population that is created from extracted knowledge
# gp.tc.0.init.transfer-percent=0.50
# gp.tc.0.init.extract-percent=0.50
# gp.tc.0.init.min-cf-depth=2
# gp.tc.0.init.max-cf-depth=5
# ==============================


# ==============================
# The training results
# ==============================
# for manual policies
manual-policies = 1
manual-policies.0 = gphhucarp.decisionprocess.routingpolicy.PathScanning5Policy
# for gp-evolved policies
train-path = /home/mazhar/MyPhD/SourceCodes/gpucarp/stats/target-wk/
generations=50


# ==============================
# KnowledgeableState
# ==============================
# state=gphhucarp.gp.KnowledgeableState
knowledge-state.change-detction=simple
knowledge-state.niche-radius=0.5
knowledge-state.num-instance=8
knowledge-state.immigrant-percent=0.1
knowledge-state.knowledge-log-file=./stats/target-wk/KnowledgeState.Log

# ==============================
# KnowledgeableState
# ==============================
# state=tl.gp.PPTEvolutionState
ppt-state.lr=0.8
ppt-state.sample-size=100
ppt-state.tournament-size=20
ppt-state.knowledge-log-file=PPTEvolutionStateLog
ppt-state.niche-radius=0.1
ppt-state.niche-capacity=2


# ==============================
# FullTree
# ==============================
# gp.tc.0.init=tl.gp.SimpleCodeFragmentBuilder
# gp.tc.0.init.knowledge-file=/home/mazhar/grid/gdb1.vs5:gen_50/KnowledgeSource/3/population.gen.49.bin
# gp.tc.0.init.transfer-percent=50
# gp.tc.0.init.knowledge-extraction=root
# gp.tc.0.init.knowledge-log-file=./stats/target-wk/FullTreeLog
# gp.tc.0.init.allow-duplicates=false

# ==============================
# TournamentFullTree
# ==============================
# gp.tc.0.init=tl.gp.TournamentFullTreeBuilder
# gp.tc.0.init.knowledge-file=/home/mazhar/grid/gdb1.vs5:gen_50/KnowledgeSource/3/population.gen.49.bin
# gp.tc.0.init.transfer-percent=0.1
# gp.tc.0.init.knowledge-extraction=root
# gp.tc.0.init.knowledge-log-file=./stats/target-wk/FullTreeLog
# gp.tc.0.init.allow-duplicates=false
# gp.tc.0.init.tournament-size=20



# ==============================
# The test set
# ==============================
# state = gphhucarp.gp.GPHHEvolutionState

state = tl.gp.PPTEvolutionState
ppt-state.lr=0.8
ppt-state.sample-size=100
ppt-state.tournament-size=20
ppt-state.ppt-stat-log=PPTStatLog
ppt-state.ppt-log=PPTLog

# eval = ec.simple.SimpleEvaluator
# eval.problem = gphhucarp.gp.ReactiveGPHHProblem
# eval.problem.pool-filter = gphhucarp.decisionprocess.poolfilter.ExpFeasiblePoolFilter
# eval.problem.tie-breaker = gphhucarp.decisionprocess.tiebreaker.SimpleTieBreaker
# eval.problem.data = gputils.DoubleData
# eval.problem.eval-model = gphhucarp.gp.evaluation.ReactiveEvaluationModel
# eval.problem.eval-model.objectives = 1
# eval.problem.eval-model.objectives.0 = total-cost
# eval.problem.eval-model.instances = 1
# eval.problem.eval-model.instances.0.file = gdb/gdb1.dat
# eval.problem.eval-model.instances.0.samples = 500
# eval.problem.eval-model.instances.0.vehicles = from-file
# eval.problem.eval-model.instances.0.demand-uncertainty-level = 0.2
# eval.problem.eval-model.instances.0.cost-uncertainty-level = 0.2
# eval.problem.eval-model.seed = 25234



clear = true